import { WireService } from './wire-service';
import { useIpfs, IpfsMessage } from '../hooks/useIpfs';

export class ChatService {
    private static instance: ChatService;
    private wireService: WireService;
    private ipfs;

    private constructor() {
        this.wireService = WireService.getInstance();
        this.ipfs = useIpfs();
    }

    static getInstance(): ChatService {
        if (!ChatService.instance) {
            ChatService.instance = new ChatService();
        }
        return ChatService.instance;
    }

    async submitUserMessage(personaName: string, messageText: string, privateKey: string): Promise<void> {
        try {
            // Step 1: Create message object with metadata
            const message: IpfsMessage = {
                text: messageText,
                timestamp: new Date().toISOString(),
                persona: personaName
            };
            
            // Step 2: Upload message to IPFS
            const messageCid = await this.ipfs.uploadMessage(message);
            
            // Step 3: Submit message CID to blockchain
            await this.wireService.submitMessage(personaName, messageCid, privateKey);
        } catch (error) {
            console.error('Error submitting message:', error);
            throw error;
        }
    }

    async getMessageContent(messageCid: string): Promise<IpfsMessage> {
        return this.ipfs.fetchMessage(messageCid);
    }
} 